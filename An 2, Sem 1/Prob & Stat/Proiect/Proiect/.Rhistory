barplot(benfordExpected,col=rgb(1, 0, 0, .5))
barplot(vectTest,col=rgb(0, 1, 0, .5), add=TRUE)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Benford's Law"),
sidebarLayout(
sidebarPanel(
selectInput("selectGraph", "Choose you Input:", choices = myList)
),
mainPanel(
p ("Legea lui Benford este o regula statistica care spune ca prima cifra din date natural generate numerice urmeaza o anumita distributie
(1 apare in proportie de 30%, iar 9 apare in proportie de 4.5%). Benfordâ€™s Law a fost folosita pentru a detecta fraude bancare,
electorale, de carti de credit sau de taxe. In Statele Unite este considerata proba, daca este dovedita in curtile de judecata pentru cazurile de fraude."),
p("In aplicatia noastra vom ilustra Legea lui Benford pe mai multe seturi de date ce pot fi alese din meniul din stranga.")
, textOutput("result")
, plotOutput("grafic")
)
)
)
runApp('benford.r')
server <- function(input, output){
output$result <- renderText({
paste("Ai ales", input$selectGraph)
})
output$grafic <- renderPlot({
if(input$selectGraph == "Populatia oraselor din Romania"){
paste("Salut")
}
barplot(benfordExpected,col=rgb(1, 0, 0, .5))
barplot(vectTest,col=rgb(0, 1, 0, .5), add=TRUE)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output){
output$result <- renderText({
if(input$selectGraph == "Populatia oraselor din Romania"){
paste("Ai ales", input$selectGraph)
}
})
output$grafic <- renderPlot({
barplot(benfordExpected,col=rgb(1, 0, 0, .5))
barplot(vectTest,col=rgb(0, 1, 0, .5), add=TRUE)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output){
output$result <- renderText({
if(input$selectGraph == "Populatia oraselor din Romania"){
paste("Ai ales", input$selectGraph)
}
})
output$grafic <- renderPlot({
barplot(benfordExpected,col=rgb(1, 0, 0, .5))
if(input$selectGraph == "Populatia oraselor din Romania"){
barplot(populatie,col=rgb(0, 1, 0, .5), add=TRUE)
}
else{
barplot(orase,col=rgb(0, 1, 0, .5), add=TRUE)
}
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output){
output$result <- renderText({
if(input$selectGraph == "Populatia oraselor din Romania"){
paste("Ai ales", input$selectGraph)
}
})
output$grafic <- renderPlot({
barplot(benfordExpected,col=rgb(1, 0, 0, .5))
if(input$selectGraph == "Populatia oraselor din Romania"){
barplot(orase, col=rgb(0, 1, 0, .5), add=TRUE)
}
else if (input$selectGraph == "Populatia tarilor din lume"){
barplot(populatie, col=rgb(0, 1, 0, .5), add=TRUE)
}
else if (input$selectGraph == "Numarul cazurilor COVID-19 pe tari"){
barplot(cazuri_covid, col=rgb(0, 1, 0, .5), add=TRUE)
}
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
runApp('benford.r')
max(orase)
for (x in orase){
print(x)
orase <- benford(x)
}
for (x in orase){
print(x)
orase <- benford(x)
}
orase <- data_orase[2]
for (x in orase){
print(x)
orase <- benford(x)
}
orase <- data_orase[2]
orase
for (x in orase){
max(x)
vect <- c(0,1,2,3,4)
max(vect)
min(vect)
print(min(vect))
vect <- c(0,1,2,3,4)
vect
orase
runApp('benford.r')
library(shiny); runApp('benford.r')
runApp('benford.r')
ui <- fluidPage(
titlePanel("Legea lui Benford"),
sidebarLayout(
position = "right",
sidebarPanel(
selectInput("selectGraph", "Alege setul de date dorit:", choices = myList)
),
mainPanel(
p ("Legea lui Benford este o regula statistica care spune ca", strong("prima cifra"), " din date numerice din viata reala urmeaza o anumita distributie
(1 apare in proportie de 30.1%, 2 apare in proportie de 17.6% si tot asa, pana la 9, care apare cel mai rar, avand o proportie de 4.6%).
S-a demonstrat ca aceasta lege se aplica pentru o varietate mare de seturi de date, inclusiv populatia tarilor/oraselor, preturile facturilor de curent,
preturile actiunilor companiilor si multe altele. In Statele Unite este considerata proba, daca este dovedita in curtile de judecata,
pentru cazurile de frauda."),
helpText('An irrational number \\(\\sqrt{2}\\)
and a fraction $$1-\\frac{1}{2}$$'),
p("In aplicatia noastra vom ilustra Legea lui Benford pe diferite seturi de date ce pot fi alese din meniul din dreapta.")
, plotlyOutput("grafic")
, strong(textOutput("result", inline = FALSE))
)
ui <- fluidPage(
titlePanel("Legea lui Benford"),
sidebarLayout(
position = "right",
sidebarPanel(
selectInput("selectGraph", "Alege setul de date dorit:", choices = myList)
),
mainPanel(
p ("Legea lui Benford este o regula statistica care spune ca", strong("prima cifra"), " din date numerice din viata reala urmeaza o anumita distributie
(1 apare in proportie de 30.1%, 2 apare in proportie de 17.6% si tot asa, pana la 9, care apare cel mai rar, avand o proportie de 4.6%).
S-a demonstrat ca aceasta lege se aplica pentru o varietate mare de seturi de date, inclusiv populatia tarilor/oraselor, preturile facturilor de curent,
preturile actiunilor companiilor si multe altele. In Statele Unite este considerata proba, daca este dovedita in curtile de judecata,
pentru cazurile de frauda."),
helpText('An irrational number \\(\\sqrt{2}\\)
and a fraction $$1-\\frac{1}{2}$$'),
p("In aplicatia noastra vom ilustra Legea lui Benford pe diferite seturi de date ce pot fi alese din meniul din dreapta.")
, plotlyOutput("grafic")
, strong(textOutput("result", inline = FALSE))
)
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
ui <- fluidPage(
titlePanel("Legea lui Benford"),
withMathJax(),
sidebarLayout(
position = "right",
sidebarPanel(style = "display: none"
),
mainPanel(
div(
p ("Legea lui Benford este o regula statistica care spune ca", strong("prima cifra"), " din date numerice din viata reala urmeaza o anumita distributie
(1 apare in proportie de 30.1%, 2 apare in proportie de 17.6% si tot asa, pana la 9, care apare cel mai rar, avand o proportie de 4.6%).
S-a demonstrat ca aceasta lege se aplica pentru o varietate mare de seturi de date, inclusiv populatia tarilor/oraselor, preturile facturilor de curent,
preturile actiunilor companiilor si multe altele. In Statele Unite este considerata proba, daca este dovedita in curtile de judecata,
pentru cazurile de frauda."),
helpText('P(d) = $\log_{10}(d+1)$ - $\log_{10}(d)$ = $\log_{10}(1 + \\frac{1}{d}$$)$'),
p("In aplicatia noastra vom ilustra Legea lui Benford pe diferite seturi de date ce pot fi alese din meniul de mai jos."),
div(
selectInput("selectGraph", "Alege setul de date dorit:", choices = myList),
style = "text-align: center"
),
style = "background-color:#f5f5f5; padding: 1%; border-radius: 10px"
)
, plotlyOutput("grafic")
, div(
strong(textOutput("length"))
, strong(textOutput("min"))
, strong(textOutput("max"))
, style = "background-color:#f5f5f5; padding: 1%; border-radius: 10px; text-align: center; margin-top: 1%"
)
)
)
)
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
orase
data_orase <- read_excel("orase.xlsx")
orase <- data_orase[2]
for (x in orase){
concatenate <- x
max_orase <- max(x)
min_orase <- min(x)
length_orase <- length(x)
orase <- benford(x)
}
concatenate
data_orase <- read_excel("orase.xlsx")
data_populatie <- read.csv("pop.csv")
data_cazuri_covid <- read.csv("cazuri_covid.csv")
orase <- data_orase[2]
populatie <- data_populatie[2]
cazuri_covid <- data_cazuri_covid[2]
for (x in orase){
concatenate <- x
max_orase <- max(x)
min_orase <- min(x)
length_orase <- length(x)
orase <- benford(x)
}
for (x in populatie){
concatenate <- c(concatenate, x)
max_populatie <- max(x)
min_populatie <- min(x)
length_populatie <- length(x)
populatie <- benford(x)
}
concatenate
for (x in cazuri_covid){
concatenate <- c(concatenate, x)
max_cazuri <- max(x)
min_cazuri <- min(x)
length_cazuri <- length(x)
cazuri_covid <- benford(x)
}
concatenate
tot <- benford(concatenate)
tot
length(tot)
sum(tot)
length(concatenate)
max_concat = max(concatenate)
min_concat = min(concatenate)
length_concat = length(concatenate)
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
df4
x4 <- runif(N, 0, 100)
df4 <- pctFirstDigit(x1^2 / x3 * x4)
library("readxl")
library(shiny)
library(plotly)
benford <- function(vec){
count <- length(vec)
res <- c(0,0,0,0,0,0,0,0,0)
for (x in vec){
while (x > 9)
{
x = floor(x/10)
}
#print(x)
res[x] = res[x] + 1
#print(res)
}
print(res)
for (i in (1:9)){
#print(res[x])
res[i] = res[i]/count
#print(res[x])
}
return(res)
}
setwd("C:/Users/theo_/Desktop/Proiect")
data_orase <- read_excel("orase.xlsx")
data_populatie <- read.csv("pop.csv")
data_cazuri_covid <- read.csv("cazuri_covid.csv")
orase <- data_orase[2]
populatie <- data_populatie[2]
cazuri_covid <- data_cazuri_covid[2]
numbers <- c('1','2','3','4','5','6','7','8','9')
orase
for (x in orase){
concatenate <- x
max_orase <- max(x)
min_orase <- min(x)
length_orase <- length(x)
orase <- benford(x)
}
#print(orase)
#barplot(orase)
for (x in populatie){
concatenate <- c(concatenate, x)
max_populatie <- max(x)
min_populatie <- min(x)
length_populatie <- length(x)
populatie <- benford(x)
}
#print(populatie)
#barplot(populatie)
for (x in cazuri_covid){
concatenate <- c(concatenate, x)
max_cazuri <- max(x)
min_cazuri <- min(x)
length_cazuri <- length(x)
cazuri_covid <- benford(x)
}
#print(cazuri_covid)
#barplot(cazuri_covid)
tot <- benford(concatenate)
max_concat = max(concatenate)
min_concat = min(concatenate)
length_concat = length(concatenate)
benfordExpected = c(0,0,0,0,0,0,0,0,0)
for (i in (1:9)){
benfordExpected[i] = log10(1+(1/i))
}
firstDigit <- function(x) substr(gsub('[0.]', '', x), 1, 1)
pctFirstDigit <- function(x) data.frame(table(firstDigit(x)) / length(x))
benlaw <- function(d) log10(1 + 1 / d)
digits <- 1:9
N <- 1000
set.seed(1234)
x1 <- runif(N, 0, 100)
df1 <- pctFirstDigit(x1)
x3 <- runif(N, 0, 100)
df3 <- pctFirstDigit(x1^2 / x3)
x4 <- runif(N, 0, 100)
df4 <- pctFirstDigit(x1^2 / x3 * x4)
df4
baseBarplot <- barplot(benlaw(digits), names.arg = digits, xlab = "Primele cifre", col="blue",
ylim = c(0, .35))
lines(x = baseBarplot[,1], y = df4$Freq, col = "green", lwd = 4,
type = "b", pch = 23, cex = 1.5, bg = "green")
df3
df1
df1[2]
df4[2]
for (x in df4[2]){
y <- x
}
y
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
library(shiny); runApp('benford.r')
library(shiny); runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
---
title: "Benford's Law"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
knitr::opts_chunk$set(echo = TRUE)
```{r cars}
---
title: "R Notebook"
output:
html_document:
df_print: paged
pdf_document: default
---
#Exercitiul 1
O familie are doi copii. Care este probabilitatea ca ambii copii sa fie baieti stiind ca cel putin unul dintre copii este baiat? Care este probabilitate ca ambii copii sa fie baieti stiind ca cel mai tanar este baiat?
Consideram evenimentele $A = \{\text{Familia are ambii copii B}\}$ si $B = \{\text{Familia are cel putin un B}\}$ si vrem sa determinam probabilitarea
$$
\mathbb{P}(A|B) = \frac{\mathbb{P}(A\cap B)}{\mathbb{P}(B)} = \frac{\mathbb{P}(A)}{\mathbb{P}(B)}\approx \frac{N(A)}{N(B)}\
$$
```{r}
# Ctrl + Alt + I - generam chunk R
# Ctrl + Shift + Enter - rulam codul din chunk-ul R
N = 10 ^ 5
scopil1 = sample(c("F", "B"), N, replace = TRUE)
scopil2 = sample(c("F", "B"), N, replace = TRUE)
nr_fam_2B = sum(scopil1 == "B" & scopil2 == "B")
nr_fam_cp1B = sum(scopil1 == "B" | scopil2 == "B")
nr_fam_pB = sum(scopil1 == "B")
p1 = nr_fam_2B / nr_fam_cp1B
p_fam_2B = nr_fam_2B / N
p1
p2 = nr_fam_2B / nr_fam_pB
p2
```
#Exercitiul 2
Problema Monty Hall
```{r}
Monty_Hall = function(usa_masina = 1, usa_aleasa = 2, strategia = 1){
usi = 1:3
#Monty Hall intoarce usa necastigatoare
if(usa_aleasa != usa_masina){
usa_monty = usi[-c(usa_aleasa, usa_masina)]
}
else{
usa_monty = sample(usi[-usa_aleasa], 1)
}
#print(paste0("Monty Hall intoarce usa cu numarul ", usa_monty, ", in spatele careia se afla o capra."))
if(strategia ==2){
usa_aleasa = usi[-c(usa_aleasa, usa_monty)]
}
raspuns = usa_masina ==usa_aleasa
#if(raspuns){
#  print("Ai castigat!")
#}
#else{
#  print(paste0("Ai pierdut! Masina se afla in spatele usii cu numarul ", usa_masina,
#        ", dar tu ai ales usa cu numarul ", usa_aleasa))
#}
return(raspuns)
}
```
```{r}
joc1 = Monty_Hall(2, 2, 1)
joc2 = Monty_Hall(2, 2, 2)
```
```{r}
N = 10^5
set.seed(123)
sample(1:3, 10, replace = T)
usa_m = sample(1:3, N, replace = TRUE)
usa_a = 2
strateg = 2
start = proc.time()
rezultate_joc = logical(N)
for(i in 1:N){
rezultate_joc[i] = Monty_Hall(usa_m[i], usa_a, strateg)
}
prob1 = sum(rezultate_joc) / N
prob1
proc.time() - start
Monty_vect = Vectorize(Monty_Hall, "usa_masina")
start2 = proc.time()
prob_s1 = sum(Monty_vect(usa_m, usa_a, strateg)) / N
prob_s1
proc.time() - start2
```
runApp('benford.r')
---
title: "R Notebook"
output:
html_document:
df_print: paged
pdf_document: default
---
#Exercitiul 1
O familie are doi copii. Care este probabilitatea ca ambii copii sa fie baieti stiind ca cel putin unul dintre copii este baiat? Care este probabilitate ca ambii copii sa fie baieti stiind ca cel mai tanar este baiat?
Consideram evenimentele $A = \{\text{Familia are ambii copii B}\}$ si $B = \{\text{Familia are cel putin un B}\}$ si vrem sa determinam probabilitarea
$$
\mathbb{P}(A|B) = \frac{\mathbb{P}(A\cap B)}{\mathbb{P}(B)} = \frac{\mathbb{P}(A)}{\mathbb{P}(B)}\approx \frac{N(A)}{N(B)}\
$$
runApp('benford.r')
---
title: "Benford's Law"
output: html_document
---
Grupa: 242
Membri echipei:
- Stoica Liviu
- Tudorache Alexandru-Theodor
- Zaharia Catalin
orase
orase[9]
orase[15]
runApp('benford.r')
runApp('benford.r')
runApp('benford.r')
