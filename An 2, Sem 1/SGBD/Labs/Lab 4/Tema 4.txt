--1. 

select employee_id
from (select *
      from employees
      where commission_pct is null
      order by salary asc)
where rownum <= 5
order by salary asc;

DECLARE 
    TYPE tablou_id IS TABLE OF employees.employee_id%type
                         INDEX BY BINARY_INTEGER;
    TYPE tablou_salariu IS TABLE OF employees.salary%type
                         INDEX BY BINARY_INTEGER;
    t tablou_id;
    s tablou_salariu;
BEGIN
    select employee_id bulk collect into t
    from (select *
          from employees
          where commission_pct is null
          order by salary asc)
    where rownum <= 5
    order by salary asc;
    
    select salary bulk collect into s
    from (select *
          from employees
          where commission_pct is null
          order by salary asc)
    where rownum <= 5
    order by salary asc;
    
    DBMS_OUTPUT.PUT_LINE('Valoare veche salarii:');
    DBMS_OUTPUT.NEW_LINE;
    FOR i IN t.first..t.last LOOP
        DBMS_OUTPUT.PUT_LINE('Angajatul cu id-ul ' || t(i) || ' are salariul ' || s(i));
    END LOOP;
    
    FOR i IN t.FIRST..t.LAST LOOP
        UPDATE emp_ttu
        set salary = salary * 1.05 
        WHERE employee_id = t(i);
    END LOOP;
    
    select salary bulk collect into s
    from (select *
          from emp_ttu
          where commission_pct is null
          order by salary asc)
    where rownum <= 5
    order by salary asc;
    
    DBMS_OUTPUT.NEW_LINE;
    DBMS_OUTPUT.PUT_LINE('Valoare noua salarii:');
    DBMS_OUTPUT.NEW_LINE;
    FOR i IN t.first..t.last LOOP
        DBMS_OUTPUT.PUT_LINE('Angajatul cu id-ul ' || t(i) || ' are salariul ' || s(i));
    END LOOP;
END;
/

rollback;

--2

CREATE OR REPLACE TYPE tip_orase_ttu AS VARRAY(10) OF VARCHAR(30); 
/

CREATE TABLE excursie_ttu
    (cod_excursie NUMBER(4),
     denumire VARCHAR2(20),
     orase tip_orase_ttu,
     status VARCHAR2(12)
    );

drop table excursie_ttu;

--a

DECLARE
    o tip_orase_ttu := tip_orase_ttu('Bucuresti', 'Buzau', 'Pitesti');
BEGIN
    INSERT INTO excursie_ttu
    VALUES(1, 'excursie 1', o,'disponibila');
    
    INSERT INTO excursie_ttu
    VALUES(2, 'excursie 2', tip_orase_ttu('Timisioara', 'Oradea'),'disponibila');
    
    INSERT INTO excursie_ttu
    VALUES(3, 'excursie 3', tip_orase_ttu('Iasi', 'Suceava', 'Piatra-Neamt', 'Focsani', 'Buzau'),'disponibila');
    
    INSERT INTO excursie_ttu
    VALUES(4, 'excursie 4', tip_orase_ttu('Cluj-Napoca', 'Bistrita-Nasaud'),'disponibila');
    
    INSERT INTO excursie_ttu
    VALUES(5, 'excursie 5', tip_orase_ttu('Bucuresti', 'Ploiesti', 'Brasov'),'disponibila');
END;
/

select * from excursie_ttu;

--b

DECLARE
    o tip_orase_ttu := tip_orase_ttu();
    o1 tip_orase_ttu := tip_orase_ttu();
    cod excursie_ttu.cod_excursie%type := &p_cod;
    oras_aux VARCHAR(30);
    oras1 VARCHAR(30) := 'Bucuresti';
    oras2 VARCHAR(30) := 'Buzau';
    oras3 VARCHAR(30) := 'Pitesti';
    io1 number(2);
    io2 number(2);
    io3 number(2);
    ind number(2);
BEGIN
    select orase into o
    from excursie_ttu
    where cod_excursie = cod;
    
    for i in 1..o.count loop
        DBMS_OUTPUT.PUT_LINE(o(i));
    end loop;
    
    DBMS_OUTPUT.NEW_LINE;
    
    o.extend;
    ind := o.count;
    o(ind) := 'Campulung';
    
    for i in 1..o.count loop
        DBMS_OUTPUT.PUT_LINE(o(i));
    end loop;
    
    DBMS_OUTPUT.NEW_LINE;
    
    o.extend;
    ind := o.count;
    
    loop
        o(ind) := o(ind - 1);
        ind := ind - 1;
        EXIT WHEN ind = 2;
    end loop;
    
    o(2) := 'Urziceni';
    
    for i in 1..o.count loop
        DBMS_OUTPUT.PUT_LINE(o(i));
    end loop;
    
    DBMS_OUTPUT.NEW_LINE;
    
    for i in 1..o.count loop
        if o(i) = oras1 then
            io1 := i;
        end if;
        if o(i) = oras2 then
            io2 := i;
        end if;
    end loop;
    
    oras_aux := o(io1);
    o(io1) := o(io2);
    o(io2) := oras_aux;
    
    for i in 1..o.count loop
        DBMS_OUTPUT.PUT_LINE(o(i));
    end loop;
    
    DBMS_OUTPUT.NEW_LINE;
    
    --creez un vector nou in care voi pune orasele din 'o', inafara de orasul care trebuie sters
    
    for i in 1..o.count loop
        if o(i) = oras3 then
            io3 := i;
        end if;
    end loop;
    
    ind := 1;
    
    for i in 1..o.count loop
        if i <> io3 then
            o1.extend;
            o1(ind) := o (i);
            ind := ind + 1;
        end if;
    end loop;
    
    UPDATE excursie_ttu
    SET orase = o1
    WHERE cod_excursie = cod;
END;
/

select * from excursie_ttu;

rollback;

--c

DECLARE
    o tip_orase_ttu := tip_orase_ttu();
    cod excursie_ttu.cod_excursie%type := &p_cod;
BEGIN
    select orase into o
    from excursie_ttu
    where cod_excursie = cod;
    
    DBMS_OUTPUT.PUT_LINE('Excursia viziteaza ' || o.count || ' orase: ');
    for i in 1..o.count loop
        DBMS_OUTPUT.PUT_LINE(o(i));
    end loop;
END;
/

--d

DECLARE
    TYPE tablou_excursii IS TABLE OF excursie_ttu%ROWTYPE 
                         INDEX BY BINARY_INTEGER;
    t tablou_excursii;
    o tip_orase_ttu := tip_orase_ttu();
    nr number(2);
BEGIN
    select * bulk collect into t
    from excursie_ttu;
    
    for i in t.first..t.last loop
        DBMS_OUTPUT.PUT_LINE(t(i).denumire || ' viziteaza urmatoarele orasele: ');
        o := t(i).orase;
        for i in 1..o.count loop
            DBMS_OUTPUT.PUT_LINE(o(i));
        end loop;
        DBMS_OUTPUT.NEW_LINE;
    end loop;
END;
/

--e

DECLARE
    TYPE tablou_excursii IS TABLE OF excursie_ttu%ROWTYPE 
                         INDEX BY BINARY_INTEGER;
    t tablou_excursii;
    o tip_orase_ttu := tip_orase_ttu();
    nr number(2);
    mini number(2) := 99;
BEGIN
    select * bulk collect into t
    from excursie_ttu;
    
    for i in t.first..t.last loop
        o := t(i).orase;
        if o.count<mini then
            mini := o.count;
        end if;
    end loop;
    
    for i in t.first..t.last loop
        o := t(i).orase;
        if mini=o.count then
            UPDATE excursie_ttu
            SET status = 'anulata'
            WHERE cod_excursie = t(i).cod_excursie;
        end if;
    end loop;
    
    
END;
/

select *
from excursie_ttu;

drop table excursie_ttu;
DROP TYPE tip_orase_ttu;

--3

CREATE OR REPLACE TYPE tip_orase_ttu AS TABLE OF VARCHAR2(30);
/
CREATE TABLE excursie_ttu (
    cod_excursie number(4),
    denumire varchar2(20),
    orase tip_orase_ttu,
    status varchar2(12)
    )
    nested table orase store as orase_ttu;

select * from excursie_ttu;

DECLARE
    o tip_orase_ttu := tip_orase_ttu('Bucuresti', 'Buzau', 'Pitesti');
BEGIN
    INSERT INTO excursie_ttu
    VALUES(1, 'excursie 1', o,'disponibila');
    
    INSERT INTO excursie_ttu
    VALUES(2, 'excursie 2', tip_orase_ttu('Timisioara', 'Oradea'),'disponibila');
    
    INSERT INTO excursie_ttu
    VALUES(3, 'excursie 3', tip_orase_ttu('Iasi', 'Suceava', 'Piatra-Neamt', 'Focsani', 'Buzau'),'disponibila');
    
    INSERT INTO excursie_ttu
    VALUES(4, 'excursie 4', tip_orase_ttu('Cluj-Napoca', 'Bistrita-Nasaud'),'disponibila');
    
    INSERT INTO excursie_ttu
    VALUES(5, 'excursie 5', tip_orase_ttu('Bucuresti', 'Ploiesti', 'Brasov'),'disponibila');
END;
/

select * from excursie_ttu;

--b

DECLARE
    o tip_orase_ttu;
    o1 tip_orase_ttu;
    cod excursie_ttu.cod_excursie%type := &p_cod;
    oras_aux VARCHAR(30);
    oras1 VARCHAR(30) := 'Bucuresti';
    oras2 VARCHAR(30) := 'Buzau';
    oras3 VARCHAR(30) := 'Pitesti';
    io1 number(2);
    io2 number(2);
    io3 number(2);
    ind number(2);
BEGIN
    select orase into o
    from excursie_ttu
    where cod_excursie = cod;
    
    for i in 1..o.count loop
        DBMS_OUTPUT.PUT_LINE(o(i));
    end loop;
    
    DBMS_OUTPUT.NEW_LINE;
    
    o.extend;
    ind := o.count;
    o(ind) := 'Campulung';
    
    for i in 1..o.count loop
        DBMS_OUTPUT.PUT_LINE(o(i));
    end loop;
    
    DBMS_OUTPUT.NEW_LINE;
    
    o.extend;
    ind := o.count;
    
    loop
        o(ind) := o(ind - 1);
        ind := ind - 1;
        EXIT WHEN ind = 2;
    end loop;
    
    o(2) := 'Urziceni';
    
    for i in 1..o.count loop
        DBMS_OUTPUT.PUT_LINE(o(i));
    end loop;
    
    DBMS_OUTPUT.NEW_LINE;
    
    for i in 1..o.count loop
        if o(i) = oras1 then
            io1 := i;
        end if;
        if o(i) = oras2 then
            io2 := i;
        end if;
    end loop;
    
    oras_aux := o(io1);
    o(io1) := o(io2);
    o(io2) := oras_aux;
    
    for i in 1..o.count loop
        DBMS_OUTPUT.PUT_LINE(o(i));
    end loop;
    
    DBMS_OUTPUT.NEW_LINE;
    
    for i in 1..o.count loop
        if o(i) = oras3 then
            io3 := i;
        end if;
    end loop;
    
    o.delete(io3);
    
    UPDATE excursie_ttu
    SET orase = o
    WHERE cod_excursie = cod;
END;
/

select * from excursie_ttu;

rollback;

--c

DECLARE
    o tip_orase_ttu := tip_orase_ttu();
    cod excursie_ttu.cod_excursie%type := &p_cod;
BEGIN
    select orase into o
    from excursie_ttu
    where cod_excursie = cod;
    
    DBMS_OUTPUT.PUT_LINE('Excursia viziteaza ' || o.count || ' orase: ');
    for i in 1..o.count loop
        DBMS_OUTPUT.PUT_LINE(o(i));
    end loop;
END;
/

--d

DECLARE
    TYPE tablou_excursii IS TABLE OF excursie_ttu%ROWTYPE 
                         INDEX BY BINARY_INTEGER;
    t tablou_excursii;
    o tip_orase_ttu := tip_orase_ttu();
    nr number(2);
BEGIN
    select * bulk collect into t
    from excursie_ttu;
    
    for i in t.first..t.last loop
        DBMS_OUTPUT.PUT_LINE(t(i).denumire || ' viziteaza urmatoarele orasele: ');
        o := t(i).orase;
        for i in 1..o.count loop
            DBMS_OUTPUT.PUT_LINE(o(i));
        end loop;
        DBMS_OUTPUT.NEW_LINE;
    end loop;
END;
/

--e

DECLARE
    TYPE tablou_excursii IS TABLE OF excursie_ttu%ROWTYPE 
                         INDEX BY BINARY_INTEGER;
    t tablou_excursii;
    o tip_orase_ttu := tip_orase_ttu();
    nr number(2);
    mini number(2) := 99;
BEGIN
    select * bulk collect into t
    from excursie_ttu;
    
    for i in t.first..t.last loop
        o := t(i).orase;
        if o.count<mini then
            mini := o.count;
        end if;
    end loop;
    
    for i in t.first..t.last loop
        o := t(i).orase;
        if mini=o.count then
            UPDATE excursie_ttu
            SET status = 'anulata'
            WHERE cod_excursie = t(i).cod_excursie;
        end if;
    end loop;
END;
/

select *
from excursie_ttu;

drop table excursie_ttu;
DROP TYPE tip_orase_ttu;