9. Să se afişeze lista angajaţilor care au lucrat numai pe proiecte conduse de managerul de proiect având codul 102.

select * from projects;

select * from works_on;


select employee_id
from works_on
where project_id in (select project_id
                     from projects
                     where project_manager = 102);

minus

select employee_id
from works_on
where project_id in (select project_id
                     from projects
                     where project_manager != 102);


10. a) Să se obţină numele angajaţilor care au lucrat cel puţin pe aceleaşi proiecte ca şi angajatul
având codul 200.

select employee_id, last_name
from employees e join works_on wo using (employee_id)
where project_id in (select project_id
                     from works_on
                     where employee_id = 200)
      and employee_id != 200
group by employee_id, last_name
having count(project_id) = (select count(project_id)
                            from works_on
                            where employee_id = 200);

b) Să se obţină numele angajaţilor care au lucrat cel mult pe aceleaşi proiecte ca şi angajatul având codul 200.


-- metoda 1

select employee_id, last_name
from employees e join works_on wo using (employee_id)
where project_id in (select project_id
                     from works_on
                     where employee_id = 200)
      and employee_id != 200
      
minus

select employee_id, last_name
from employees e join works_on wo using (employee_id)
where project_id in (select project_id
                     from works_on
                     
                     minus
                     
                     select project_id
                     from works_on
                     where employee_id = 200
                    );


-- metoda 2


select employee_id, last_name
from employees e join works_on wo using (employee_id)
where project_id in (select project_id
                     from works_on
                     where employee_id = 200)
      and employee_id != 200
      
minus

select employee_id, last_name
from employees e join works_on wo using (employee_id)
where project_id not in (select project_id
                     from works_on
                     where employee_id = 200
                    );

11. Să se obţină angajaţii care au lucrat pe aceleaşi proiecte ca şi angajatul având codul 200.

select employee_id, last_name
from employees e join works_on wo using (employee_id)
where project_id in (select project_id
                     from works_on
                     where employee_id = 200)
      and employee_id != 200
group by employee_id, last_name
having count(project_id) = (select count(project_id)
                            from works_on
                            where employee_id = 200)
minus

select employee_id, last_name
from employees e join works_on wo using (employee_id)
where project_id in (select project_id
                     from works_on
                     
                     minus
                     
                     select project_id
                     from works_on
                     where employee_id = 200
                    );

--Variabile de substitutie

8. Să se determine departamentele având media salariilor mai mare decât un număr dat.

select department_id, round(avg(salary))
from employees
group by department_id
having avg(salary) > &p;

select department_id, round(avg(salary))
from employees
group by department_id
having avg(salary) > &&p;

undefine p;

--EX1
define x = &&y;
select &&x from dual;
define;

14. Sa se afiseze codul, numele, salariul si codul departamentului din care face parte pentru un angajat
al carui cod este introdus de utilizator de la tastatura. Analizati diferentele dintre cele 4 posibilitati
prezentate mai jos :
I.
SELECT employee_id, last_name, salary, department_id
FROM employees
WHERE employee_id = &p_cod;
II.
DEFINE p_cod;
SELECT employee_id, last_name, salary, department_id
FROM employees
WHERE employee_id = &p_cod;
UNDEFINE p_cod;
III.
DEFINE p_cod=100;
SELECT employee_id, last_name, salary, department_id
FROM employees
WHERE employee_id = &p_cod;
UNDEFINE p_cod;
IV.
ACCEPT p_cod PROMPT "cod= ";
SELECT employee_id, last_name, salary, department_id
FROM employees
WHERE employee_id = &p_cod;


15. Sa se afiseze o coloana aleasa de utilizator, dintr-un tabel ales de utilizator, ordonand dupa aceeasi
coloana care se afiseaza. De asemenea, este obligatorie precizarea unei conditii WHERE.

SELECT &&p_coloana -- && determina ca valoarea lui p_coloana sa nu mai
--fie ceruta si pentru clauza ORDER BY, urmand sa
--fie utilizata valoarea introdusa aici pentru toate
--aparitiile ulterioare ale lui &p_coloana
FROM &p_tabel
WHERE &p_where
ORDER BY &p_coloana;

16. Să se realizeze un script (fişier SQL*Plus) prin care să se afişeze numele, job-ul şi data angajării
salariaţilor care au început lucrul între 2 date calendaristice introduse de utilizator. Să se
concateneze numele şi job-ul, separate prin spaţiu şi virgulă, şi să se eticheteze coloana "Angajati".
Se vor folosi comanda ACCEPT şi formatul pentru data calendaristica MM/DD/YY.

ACCEPT data_inceput PROMPT 'Introduceti data de inceput'
ACCEPT data_sfarsit PROMPT 'Introduceti data de sfarsit'
SELECT last_name, job_id, hire_date
FROM employees
WHERE hire_date BETWEEN TO_DATE('&data_inceput', 'mm/dd/yy')
                    AND TO_DATE('&data_sfarsit', 'mm/dd/yy');


                     