# -*- coding: utf-8 -*-
"""lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14fEOvYYs_-iN0Jbwr83D4spjI2b6bCh_
"""

!unzip 'data_MNIST.zip'

from sklearn.naive_bayes import MultinomialNB
import numpy as np
import matplotlib.pyplot as plt

# ex 1
bins = np.linspace(start = 150, stop = 190, num = 4, endpoint = False)
print(bins)
data = [(160,"F"), (165, "F"), (155, "F"), (172, "F"), (175, "B"), (180, "B"), (177, "B"), (190, "B")]

f = [i for (i,j) in data if j == "F"]
b = [i for (i,j) in data if j == "B"]

print(f, b)

f_to_bins = np.digitize(f,bins)
b_to_bins = np.digitize(b,bins)

print(f_to_bins, b_to_bins)

f178 = len([i for i in f_to_bins if i == 3])
b178 = len([i for i in b_to_bins if i == 3])

p_f = f178 / (f178 + b178)
p_b = b178 / (f178 + b178)

print(p_f)
print(p_b)

train_images = np.loadtxt('data/train_images.txt')
train_labels = np.loadtxt('data/train_labels.txt').astype(np.int)

test_images = np.loadtxt('data/test_images.txt')
test_labels = np.loadtxt('data/test_labels.txt').astype(np.int)

# ex 2
num_bins = 5
bins = np.linspace(start=0, stop=255, num=num_bins)

print(bins)

def values_to_bins(x, bins):
    x_to_bins = np.digitize(x, bins)
    return x_to_bins-1

x_train = values_to_bins(train_images, bins)
x_test = values_to_bins(test_images, bins)

print(x_train.min())
print(x_test.max())

# ex 3
num_bins = 5

bins = np.linspace(start = 0, stop = 255,num = num_bins)

naive_bayes_model = MultinomialNB()
naive_bayes_model.fit(train_images, train_labels, num_bins)

#p = naive_bayes_model.predict(test_images)
accuracy = naive_bayes_model.score(test_images, test_labels)

print(accuracy)

#ex 4

for num_bins in [3, 5, 7, 9, 11]:
    bins = np.linspace(0, 255, num = num_bins)

    train = values_to_bins(train_images, bins)
    test = values_to_bins(test_images, bins)

    naive_bayes_model = MultinomialNB()

    naive_bayes_model.fit(train, train_labels)
    score = naive_bayes_model.score(test, test_labels)
    print(score)

#ex 5 -> nu merge si nu inteleg de ce

def values_to_bins(x, bins):
    x_to_bins = np.digitize(x, bins)
    return x_to_bins-1
scores = []
for num_bins in [3, 5, 7, 9, 11]:
    bins = np.linspace(0, 255, num = num_bins)
    train = values_to_bins(train_images, bins)
    test = values_to_bins(test_images, bins)
    naive_bayes_model = MultinomialNB()
    naive_bayes_model.fit(train, train_labels)
    score = naive_bayes_model.score(test, test_labels)
    scores.append(score)
nrs = [3, 5, 7, 9, 11]

maxi = nrs[scores.index(max(scores))]
bins = np.linspace(0, 255, num = maxi)
train = values_to_bins(train_images, bins)
test = values_to_bins(test_images, bins)
naive_bayes_model = MultinomialNB()
naive_bayes_model.fit(train, train_labels)
p = naive_bayes_model.predict(test_images)
nr = 0
for i in range(len(p)):
    if nr >= 10:
        break
    if p[i] != test_labels[i]:
        nr+=1
        image = test_images[i]
        image = np.reshape(image, (28, 28))
        #plt.title(f'{test_labes[i]}missclassified as {p[i]}')
        plt.imshow(image.astype(np.uint8), cmap='gray')
        plt.show()
#plt.show()

def values_to_bins(x, bins):
    x_to_bins = np.digitize(x, bins)
    return x_to_bins-1

def confusion_matrix(test_labels,predict_labels):
    matrix = [[0 for _ in range(10)] for _ in range(10)]
    for i in range(len(test_labels)):
        matrix[test_labels[i]][predict_labels[i]] += 1
    return matrix

bins = np.linspace(0, 255, num = 8)
train = values_to_bins(train_images, bins)
test = values_to_bins(test_images, bins)
naive_bayes_model = MultinomialNB()
naive_bayes_model.fit(train, train_labels)
p = naive_bayes_model.predict(test_images)

m = confusion_matrix(test_labels,p)
print(m)

from sklearn.metrics import plot_confustion_matrix

plot_confustion_matrix(naive_bayes_model, test, y_true = test_labels)