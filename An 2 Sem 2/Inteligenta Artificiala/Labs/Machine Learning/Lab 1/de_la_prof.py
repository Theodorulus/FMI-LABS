# -*- coding: utf-8 -*-
"""Lab01_B.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ki4vWeO_fbC4-4OV_ZBl6aU9K6-QC_Pb
"""

!wget https://github.com/fmi-unibuc-ia/ia/blob/master/Data/images.zip

!unzip 'images.zip'

"""##Introducere in NumPy si MatPlotLib"""

import numpy as np
import matplotlib.pyplot as plt

p_list = [1, 2, 3]
n_array = np.array([1.0, 2.2, 3.4], dtype=np.int)

print(p_list)
print(n_array)

print(n_array.dtype)
print(n_array[2])

n_mat = np.array([[1, 2, 3], 
                  [5, 6, 7]])

print(n_mat.shape)
print(n_mat[1, 2])
print(n_mat[1][2])
print(n_mat[1])

np.ones((2, 3))

np.zeros((3, 2))

np.eye(5)

np.full((3, 4), 9)

np.random.random((2, 3)) * 100

norm = np.random.normal(100, 15, (4, 5)).astype(np.int)

np.arange(0, 100, 5)

for i in [1, 4, 6]:
    print(i)

for idx, val in enumerate([1, 4, 6]):
    print(idx, val)

norm

sub_norm = norm[1:3, 1:4]
print(sub_norm)

sub_norm[0, 1] = 1000

print(sub_norm)
print(norm)

np.ravel(norm)

norm.flatten()

np.reshape(norm, (2, 10))

norm[[0, 1],[0, 1]]

sir = np.arange(0, 20)
sir

sir % 2 == 1

sir[[False,  True, False,  True, False,  True, False,  True, False,
        True, False,  True, False,  True, False,  True, False,  True,
       False,  True]]

sir[sir > 10]

x = np.array([[1, 2], [3, 4]])
y = np.array([[5, 6], [7, 8]])

print(x)
print(y)

x / y

np.sqrt(x)

np.power(x, 3)

np.matmul(x, y)

x.T

np.linalg.inv(x)

norm.shape

np.sum(norm)

np.sum(norm, axis=0)

np.sum(norm, axis=1)

np.mean(np.zeros((3, 4, 5)), axis=(1, 2)).shape

x = np.arange(0, 3 * np.pi, 0.1)
print(x)
y_1 = np.sin(x)
print(y_1)
y_2 = np.cos(x)
print(y_2)

plt.plot(x, y_1, 'g')
plt.plot(x, y_2, 'r')
plt.show()

plt.imshow(np.load('images/car_3.npy').astype(np.uint8), cmap='gray')

"""##Exercitii"""

imgs = np.array([np.load(r"images/car_{idx}.npy".format(idx = i)) for i in range(9)])
print(imgs)

sum(sum(sum(imgs)))

suma = np.sum(imgs)
print(suma)

# Commented out IPython magic to ensure Python compatibility.
# %timeit print([np.sum(img) for img in imgs])

# Commented out IPython magic to ensure Python compatibility.
# %timeit print(np.sum(imgs, axis=(1, 2)))

# imgs - (9, 400, 600)

sums = np.sum(imgs, axis=(1, 2))
print(sums.shape)

print(np.argmax(sums))

mean_image = np.mean(imgs, axis = 0)
plt.imshow(mean_image.astype(np.uint8))
plt.show()

print(np.std(imgs))

norm_imgs = (imgs - mean_image) / np.std(imgs)

cropped = imgs[:, 200:301, 280:401]

plt.imshow(imgs[7].astype(np.uint8), cmap='gray')

plt.imshow(cropped[7].astype(np.uint8), cmap='gray')

norm[3, 3] = 1000
print(norm)

np.argmax(norm)

np.max(norm)

